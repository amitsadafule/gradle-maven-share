plugins {
	id 'jacoco'
	id 'com.github.kt3k.coveralls' version '2.6.3'
	id 'nebula.javadoc-jar' version '4.4.4'
	id 'nebula.source-jar' version '4.4.4'
	id 'groovy'
}

configurations {
	jacocoRuntime
}


dependencies {
	compile 'org.apache.maven:maven-model:3.3.9'
	compile localGroovy()
	compile gradleApi()
	testCompile 'junit:junit:4.12'
	testCompile 'org.mockito:mockito-all:1.10.19'
	testCompile gradleTestKit()
	testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude module: 'groovy-all'
    }
	testRuntime files("$buildDir/testkitFiles")
	jacocoRuntime "org.jacoco:org.jacoco.agent:${jacoco.toolVersion}:runtime"
}

jacocoTestReport {
	reports {
		xml.enabled = true
		html.enabled = true
	}
}

test {
	testLogging {
		exceptionFormat = 'full'
	}
	beforeTest { TestDescriptor descriptor ->
		logger.lifecycle("Running test: $descriptor")
	}
}

task createTestkitFiles {
	def outputDir = file("$buildDir/testkitFiles")

	inputs.files sourceSets.main.runtimeClasspath
	inputs.files configurations.jacocoRuntime
	outputs.dir outputDir

	doLast {
		outputDir.mkdirs()
		String jacocoPath = configurations.jacocoRuntime.asPath.replace('\\', '/')
		file("$outputDir/testkit-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
		file("$outputDir/testkit-gradle.properties").text = "org.gradle.jvmargs=-javaagent:${jacocoPath}=destfile=$buildDir/jacoco/test.exec"
	}
}

test.dependsOn createTestkitFiles